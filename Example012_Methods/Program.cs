// Вид 1 - ничего не принимают (не принимаю аргументы), ничего не возвращают
void Method1() // например дадим наименование методу Method1, обратите внимание у нас ключевое слово void, в скобках нет
               // ни каких аргументов и без точки с запятой
{
    Console.WriteLine("Автор...."); // и есть тело метода, которое что-то может например показывать на экран
}
// вариант как вызываются подобного рода методы
//Method1(); // мы должны указать идентификатор данного метода Method1() обязательно скобки, дпльнейшей демонстрации
// выключаем его вызовв

// Вид 2 - что-то принимают (какие-то аргументы), ничего не возвращают
void Method2(string msg) // string msg - какое-то количество аргументов
{
    Console.WriteLine(msg); // соответственно здесь мы можем указывать какие-то операторы и соответсвенно использовать каки-то
                            // аргументы которые были приняты msg
}
//Method2("Текс сообщения"); // для того чтобы вызать данный метод, нам тербуется указать идентификатор Method2(и дальше указывать
// какое-то сообщение)


//  так же могут быть именновонные аргументы, которые указывают какому аргументу какое значение мы хотим указать
// это бывает часто нужно, когда методы принимают какое-то кол-во аргументов отличное от одного
void Method21(string msg, int count) // у нас есть месендж и какой нибудь условный count
{
    int i = 0; // здесь в нашем случае будет использоваться значение переменной count для того чтобы показывать на экране
               // определенное кол-во сообщений кооторые будет передоваться непосредственно в наш метод
    while (i < count)
    {
        Console.WriteLine(msg);
        i++; // увеличение счетчика на единицу называют инкрементом, а уменьшение на 1 декрементом
    }           
}
//Method21("Текст", 4); // вызов нашего метода может вызываться путем указания сообщения и дальше через запятую мы указывам
                     // сколько раз мы конкретно хотим увидеть это сообщение, допустим хотим 4 раза, зацикливание программы
                     // позволяет исправить CTRL+C
// идея в том, что мы можем явно указывать к какому аргументу, какое значение мы хотим присвопть
//Method21(msg: "Текс", count: 4); // явно указываем наименование вот этого аргумента string msg через msg: и значение
// которое должно быть передано "Текс"
//Method21(count: 4, msg: "Новый текст"); // не обяязательно это делать попорядку, можно и так

// Вид 3 - ничего не принимают, что-то возвращают
// если метод что-то возвращает, то мы должны обязательно указать тип данных int значение которого мы ожидаем
int Method3() // аргументы он ни какие не принимает
{
    return DateTime.Now.Year; // обязательное использование оператора return, и например для красоты выведем текущий Time.Now. и 
                              // и возьмем текущий год
}
int year = Method3(); // таким образом указываем идентификатор метода, и после этого в левой части мы можем использовать идентификатор 
                      // переменной year и через оператор присваивания = положить нужное значение
                      //Console.WriteLine(year); // в дальнейшем уже использовать эту переменную и то значение, которое нам вернул метод

// Вид 4 - что-то принимают, что-то возвращают
string Method4(int count, string c) //возвращать будем строку, буем передавать строку "c" друг за дружкой компоновать count раз
{
    int i = 0; // возьмем цикл
    string result = String.Empty; // дальше нам потребуется переменная куды мы будем класть результат конечный, кладем в нее значение ввиде пустой
                                  // строки "", но правельно будет написать String.Empty
    while (i < count) // после этого используем конструкцию while, пока i < count
    {
        result = result + c; // и буем класть в результат, присвоить result вот эту вот строчку "c" которую мы указали
        i++; // счетчик
    }
    return result; // после того как метод отработает, используем оператор return, в котором указываем результат или ту переменную
                   // знаение которой мы ожидаем получить из метода
}
//string res = Method4(10, "1234"); // для того чтобы вызвать метод, мы должны создать нужную нам переменную,
                                 // дальше попорядку указать например значение 10 и текст который мы будем склеивать 10 раз
//Console.WriteLine(res); // после этого можем показать на экране                                 

// Цикл for - синтаксически он собирает в себе все в кучу, счетчик, проверка условия и т.п.
// продублируем выше обозначенный пример с циклом while и переделаем на for
string Method5(int count, string c)
{
    string result = String.Empty;
    for (int i = 0; i < count; i++) // ключевое слово for, далее так называемая инициализация счетчика int i = 0,
                                    // далее проверка условия i < count, и далее инкремент, то есть увеличение счетчика i++
    {
        result = result + c;
    }
    return result;
}
//string res = Method5(10, "asd");
// Console.WriteLine(res);

// Цикл в цикле
// в качестве примера - вывод таблицы умножения на экран
for (int i = 2; i <= 10; i++) // указываем начальное значение 2 таблицы умножения
                              // говорим пока вот этот счетчик i <= 10 мы будем увеличивать i на 1
{
    for (int j = 2; j <= 10; j++) // возьмем второй цикл, и внутренний счетчик уже назавем j
    {
        Console.WriteLine($"{i} * {j} = {i * j}"); // телом второго цикла указывем непосредственное произведение, и указать это можно различными
                                                   // способами, мы врозьмем интерполяцию строк
    }
    Console.WriteLine(); // чтобы не шло все простыней, делай разрыв строки
}