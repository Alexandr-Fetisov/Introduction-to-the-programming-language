// В текущем примере мы указывали значение массива вручную. А сейчас перепишем этот код с
// использованием генератора псевдослучайных чисел с использованием методов. Мы
// потренируем то, каким образом можно взять, например, метод, передать в него массив и
// заполнить массив нужным количеством элементов. На следующем этапе опишем метод,
// который будет выводить все элементы по порядку. Затем превратим наш код поиска нужного
// индекса в метод.
// int[] array = new int [10]; // определим новый массив под именем array. Далее укажем,
// что в этом массиве будет по умолчанию 10 элементов. Запомним новую конструкцию new int
// [10], которая дословно означает «создай новый массив, где будет 10 элементов». По
// умолчанию. Кстати, он будет наполнен нулями. Чтобы заполнить массив случайными числами,
// воспользуемся методом, который опишем сами:
// Начнём с ключевого слова void. Далее дадим наименование нашему методу. В качестве
// аргумента будет приниматься какая-то коллекция, то есть аргумент collection. Затем нам надо
// получить длину нашего массива. Делается это посредством collection.Length. На следующем
// этапе возьмём позицию index, которая по умолчанию будет начинаться с 0.
void FillArray(int[] collection)
{
    int length = collection.Length;
    int index = 0;
    while (index < length) //Теперь в цикле while пропишем пока index < length будем чего-то делать
    {
        collection[index] = new Random().Next(1, 10);// После этого обратимся к аргументу collection на позицию index
                                                    // и положим туда новое случайное число — целое число из диапазона 1–10.

      //в качестве чего-то это будет как минимум index + 1 и пишим компактно вместо index = index + 1; пишем index ++
      index ++;
    }

}
// Теперь сделаем метод void, который будет печатать массив. Аналогичным образом в качестве
// аргумента здесь будет приходить массив. Обратите внимание, что здесь мы специально не
// даём одинаковые имена, чтобы привыкнуть называть разные аргументы различными
// именами. То есть в первом случае будет collection, а во втором, например, col:
void PrintArray(int[] col)
{
    int count = col.Length; // Количество элементов обозначим таким образом
    int position = 0; // Далее обозначим текущую позицию не через именование перемен index, а через position
    while (position < count) // скажем пока position < count
    {
        Console.WriteLine(col[position]); //мы будем выводить на экран через Console.WriteLine значение текущего элемента (col[position])
        position++; // Далее запишем position++ то есть увеличиваем значение текущей позиции
    }
}
int[] array = new int[10];

// Теперь разберёмся, для чего используется ключевое слово void. Дело в том, что в контексте
// языка С# есть методы, которые могут возвращать или не возвращать какие-то значения. Если
// метод ничего не возвращает, он называется void-методом. Обратите внимание, что в этом
// случае в коде оператор return, отвечающий за поиск максимума из 3, не используется.

// Протестируем наш метод. Для начала напишем FillArray и в качестве аргумента передадим
// наименование нашего массива. Затем вызовем следующий метод PrintArray, который будет
// распечатывать наш массив. Запускаем и видим, что нет Run. Обычно код запускается со
// второго раза, но иногда бывают исключения, и он срабатывает с первого.

FillArray(array);
PrintArray(array);